// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?   // Optional for OAuth users
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  todos         Todo[]
  accounts      Account[]
  sessions      Session[]
  settings      UserSettings?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Todo {
  id            String   @id @default(cuid())
  title         String
  description   String?
  completed     Boolean  @default(false)
  priority      String   @default("low") // 'low', 'high'
  dueDate       DateTime?
  scheduledDate DateTime? // Date when task becomes visible/active
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([completed])
  @@index([dueDate])
  @@index([scheduledDate])
}

model UserSettings {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // UI Preferences
  filter                    String  @default("all") // 'all', 'active', 'completed', 'overdue'
  sortBy                    String  @default("created") // 'created', 'dueDate'
  priorityFirst             Boolean @default(true)
  advancedRecommendations   Boolean @default(false)
  statsForNerds            Boolean @default(false)

  // YanAlgorithm Settings
  numCategories            Int     @default(3) // 2-10
  useCustomBase            Boolean @default(false)
  customBase               Float   @default(2.93) // 0.1-20.0
  useHalfWeight            Boolean @default(false)

  // Last Recommendation Data
  lastRecommendedTodoId    String?
  lastRecommendationTime   DateTime?

  // YanAlgorithm Results
  lastRandomNumber         Float?
  lastSelectedCategory     Int?
  lastGeneratedSum         Float?
  lastGeneratedRandomValue Float?
  lastGeneratedAt          DateTime?
  
  // Algorithm settings snapshot for validation
  lastSettingsSnapshot     Json? // Store the settings used for last generation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
